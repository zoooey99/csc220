0. Add methods

	void rankSlow (double defaultInfluence)
	void rankFast (double defaultInfluence)

   to your NotGPT class.  Make them empty for now.


1. Add a public double influenceTemp to InfoFile (right after double influence).

   To iterate over all the page files, use

	for (Map.Entry<Long,InfoFile> entry : pageDisk.entrySet()) {
	    long index = entry.getKey();
	    InfoFile file = entry.getValue();

   In your rank(boolean fast) method, set the influence in each file
   to 1.0 and the influenceTemp to 0.0.

   (After the loop) declare defaultInfluence and initialize to 0.0.

   If fast is false, call rankSlow(defaultInfluence) 20 times.
   If fast is true, call rankFast(defaultInfluence) 20 times.


2. In rankSlow, visit each page file.  Inside the loop:

     Declare and initialize influencePerIndex, the amount of influence
     it will send to each index on that page.  (To what value?)

     For each index on that page, add influencePerIndex to the
     influenceTemp of the page with that index.


   Visit each page file again:

     Set its influence to its influenceTemp plus defaultInfluence.

     Set its influenceTemp to 0.0.


3. Download Rank.java, pagedisk-mary.txt and worddisk-mary.txt.

   Run Rank.  The output should look like rank-slow-mary.txt.


HOMEWORK

4. In rank(fast), count the number of pages that have no links to other pages.

   Set double defaultInfluence to 1.0 * count / pageDisk.size()
   instead of 0.0.

   Download pagedisk-1.txt and worddisk-1.txt.

   In Rank.java change pageDiskName and wordDiskName to these files.
   (Comment the first two lines and uncomment the next two.)

   Now your output should look like rank-slow-1.txt.

   Switch Rank.java back to pagedisk-mary.txt and worddisk-mary.txt.

   rank(fast) MUST NOT USE pageDisk.get.


5. Add a Vote class to NotGPT with a Long index and a double vote.

   Make it implement Comparable<Vote>.

   The compareTo method should return the result of comparing the
   indexes if they are unequal.  Otherwise, it should return the
   result of comparing the influences.  (Double.compare may be
   helpful.)


6. In rankFast, create an empty List of Vote.  For each page file and
   for each index on that page file, create a Vote and add it to the
   list.  What should be the influence of the Vote?  (Not the same as
   the influence of the page file.)

Vote influence = page.influence/indices.size(); // or defaultInfluence?

   Sort the list of votes:  Collections.sort(votes).

   //In reality, you would have to write the votes to a big file and
   //then sort that file using external merge sort.

   Create and initialize an iterator variable for the votes.

   For each page, add the influence of the votes that have the same
   index as the page.

   Run Rank.  The fast priorities should be very close to the slow
   priorities.  Test both inputs.

   rankFast should run in time O(#pages + #votes).
   
