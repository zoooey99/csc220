1. Inside the NotGPT search method, create two variables:

    // Iterator into list of page indices for each key word.
    Iterator<Long>[] wordPageIndexIterators =
      (Iterator<Long>[]) new Iterator[searchWords.size()];
    
    // Current page index in each list, just ``behind'' the iterator.
    long[] currentPageIndex;
    
   Write a loop to initialize the entries of wordPageIndexIterators.
   wordPageIndexIterators[i] should be set to an iterator over page
   indices of the word searchWords[i].

   Initialize currentPageIndex.  You just have to allocate the
   array.  You don't have to write a loop to initialize the elements
   of the array because all its elements will automatically be zero.


2. Implement allEqual and getLargest:

  /** Check if all elements in an array of long are equal.
      @param array an array of numbers
      @return true if all are equal, false otherwise
  */
  private boolean allEqual (long[] array) {

  /** Get the largest element of an array of long.
      @param array an array of numbers
      @return largest element
  */
  private long getLargest (long[] array) {


3. Implement getNextPageIndices

  /** If all the elements of currentPageIndex are equal,
      set each one to the next() of its Iterator,
      but if any Iterator hasNext() is false, just return false.
 
      Otherwise, do that for every element not equal to the largest element.

      Return true.

      @param currentPageIndex array of current page indices
      @param wordPageIndexIterators array of iterators with next page indices
      @return true if all page indices are updated, false otherwise
  */
  private boolean getNextPageIndices
    (long[] currentPageIndex, Iterator<Long>[] wordPageIndexIterators) {


4. Implement the loop of search.  While getNextPageIndices is true
   check if the entries of currentPageIndex are all equal.
   If so, you have a found a match.  Print out its URL.

   Download Search.java from from the prog11 web page into your prog11
   folder.

   Download pagedisk-mary-ranked.txt, worddisk-mary.txt,
   pagedisk-1-ranked.txt, worddisk-1.txt into your CSC220 (project)
   folder.

   Run Search.  The printout should end with

edu.miami.cs.www/home/vjm/csc220/google/snow.html
edu.miami.cs.www/home/vjm/csc220/google/water.html
Found [mary, jack, jill] on

   Switch Search.java pageDiskName and wordDiskName to the other ones:

	String pageDiskName = "pagedisk-1-ranked.txt";
	String wordDiskName = "worddisk-1.txt";

   And change true to false towards the bottom

    List<String> keyWords = new ArrayList<String>();
    if (false) {
      keyWords.add("mary");
      keyWords.add("jack");
      keyWords.add("jill");
    } else {

   For input 2 3 5, you should see (printed out not in the GUI)

edu.miami.cs.www/home/vjm/csc220/google2/30.html
edu.miami.cs.www/home/vjm/csc220/google2/60.html
edu.miami.cs.www/home/vjm/csc220/google2/90.html

   For input 2 3 4, you should get

edu.miami.cs.www/home/vjm/csc220/google2/12.html
edu.miami.cs.www/home/vjm/csc220/google2/24.html
edu.miami.cs.www/home/vjm/csc220/google2/36.html
edu.miami.cs.www/home/vjm/csc220/google2/48.html
edu.miami.cs.www/home/vjm/csc220/google2/60.html
edu.miami.cs.www/home/vjm/csc220/google2/72.html
edu.miami.cs.www/home/vjm/csc220/google2/84.html
edu.miami.cs.www/home/vjm/csc220/google2/96.html


HOMEWORK

5. Inside the NotGPT class create a PageComparator class such that its

	compare(pageIndex1, pageIndex2)

   method returns a value < 0, = 0, > 0 depending the the comparison
   of the influence of the pages with those page indices.  Use the
   Double.compare method to implement it.

   Inside search, declare and initialize a PageComparator variable
   pageComparator.

   Declare a variable inside search:

    // Matching pages with the least popular page on the top of the
    // queue.
    PriorityQueue<Long> bestPageIndices;

   Initialize bestPageIndices using PriorityQueue with pageComparator
   as its Comparator.


6. When you find a matching page, after you print it out, do the
   following.

   If the priority queue is not "full" (has numResults elements), just
   offer the matching page index.

   If the priority queue is full, use peek() and pageComparator to
   determine if matching page should go into the queue.

   If so, do a poll() before the offer.


7. Create an array of String which will hold the results.  How big
   should it be?

   Unload the priority queue into the string.  But polling the queue
   gives you the pages in reverse order from least significant to
   most significant.  What should you do?


8. Test your program on "2", "2 3", "2 5", "2 3 5".  You should only
   get N.html if N is divisible by all the search "words".  For
   example, "2 5" only gives multiples of 10.

   Check to make sure that your output is in order of decreasing priority!
   

9. At the top of the search method, remove any words that have not
   been indexed from searchWords.  If searchWords ends up empty,
   return an empty array.  Test.

